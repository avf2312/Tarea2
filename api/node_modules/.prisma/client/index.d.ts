
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model usuario
 * 
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>
/**
 * Model DireccionesFavoritas
 * 
 */
export type DireccionesFavoritas = $Result.DefaultSelection<Prisma.$DireccionesFavoritasPayload>
/**
 * Model direcciones_bloqueadas
 * 
 */
export type direcciones_bloqueadas = $Result.DefaultSelection<Prisma.$direcciones_bloqueadasPayload>
/**
 * Model correo
 * 
 */
export type correo = $Result.DefaultSelection<Prisma.$correoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;

  /**
   * `prisma.direccionesFavoritas`: Exposes CRUD operations for the **DireccionesFavoritas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DireccionesFavoritas
    * const direccionesFavoritas = await prisma.direccionesFavoritas.findMany()
    * ```
    */
  get direccionesFavoritas(): Prisma.DireccionesFavoritasDelegate<ExtArgs>;

  /**
   * `prisma.direcciones_bloqueadas`: Exposes CRUD operations for the **direcciones_bloqueadas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Direcciones_bloqueadas
    * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.findMany()
    * ```
    */
  get direcciones_bloqueadas(): Prisma.direcciones_bloqueadasDelegate<ExtArgs>;

  /**
   * `prisma.correo`: Exposes CRUD operations for the **correo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Correos
    * const correos = await prisma.correo.findMany()
    * ```
    */
  get correo(): Prisma.correoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    usuario: 'usuario',
    DireccionesFavoritas: 'DireccionesFavoritas',
    direcciones_bloqueadas: 'direcciones_bloqueadas',
    correo: 'correo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'direccionesFavoritas' | 'direcciones_bloqueadas' | 'correo'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usuarioCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      DireccionesFavoritas: {
        payload: Prisma.$DireccionesFavoritasPayload<ExtArgs>
        fields: Prisma.DireccionesFavoritasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DireccionesFavoritasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DireccionesFavoritasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload>
          }
          findFirst: {
            args: Prisma.DireccionesFavoritasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DireccionesFavoritasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload>
          }
          findMany: {
            args: Prisma.DireccionesFavoritasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload>[]
          }
          create: {
            args: Prisma.DireccionesFavoritasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload>
          }
          createMany: {
            args: Prisma.DireccionesFavoritasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DireccionesFavoritasCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload>[]
          }
          delete: {
            args: Prisma.DireccionesFavoritasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload>
          }
          update: {
            args: Prisma.DireccionesFavoritasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload>
          }
          deleteMany: {
            args: Prisma.DireccionesFavoritasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DireccionesFavoritasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DireccionesFavoritasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DireccionesFavoritasPayload>
          }
          aggregate: {
            args: Prisma.DireccionesFavoritasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDireccionesFavoritas>
          }
          groupBy: {
            args: Prisma.DireccionesFavoritasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DireccionesFavoritasGroupByOutputType>[]
          }
          count: {
            args: Prisma.DireccionesFavoritasCountArgs<ExtArgs>,
            result: $Utils.Optional<DireccionesFavoritasCountAggregateOutputType> | number
          }
        }
      }
      direcciones_bloqueadas: {
        payload: Prisma.$direcciones_bloqueadasPayload<ExtArgs>
        fields: Prisma.direcciones_bloqueadasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.direcciones_bloqueadasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.direcciones_bloqueadasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload>
          }
          findFirst: {
            args: Prisma.direcciones_bloqueadasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.direcciones_bloqueadasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload>
          }
          findMany: {
            args: Prisma.direcciones_bloqueadasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload>[]
          }
          create: {
            args: Prisma.direcciones_bloqueadasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload>
          }
          createMany: {
            args: Prisma.direcciones_bloqueadasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.direcciones_bloqueadasCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload>[]
          }
          delete: {
            args: Prisma.direcciones_bloqueadasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload>
          }
          update: {
            args: Prisma.direcciones_bloqueadasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload>
          }
          deleteMany: {
            args: Prisma.direcciones_bloqueadasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.direcciones_bloqueadasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.direcciones_bloqueadasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$direcciones_bloqueadasPayload>
          }
          aggregate: {
            args: Prisma.Direcciones_bloqueadasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDirecciones_bloqueadas>
          }
          groupBy: {
            args: Prisma.direcciones_bloqueadasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Direcciones_bloqueadasGroupByOutputType>[]
          }
          count: {
            args: Prisma.direcciones_bloqueadasCountArgs<ExtArgs>,
            result: $Utils.Optional<Direcciones_bloqueadasCountAggregateOutputType> | number
          }
        }
      }
      correo: {
        payload: Prisma.$correoPayload<ExtArgs>
        fields: Prisma.correoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.correoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.correoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload>
          }
          findFirst: {
            args: Prisma.correoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.correoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload>
          }
          findMany: {
            args: Prisma.correoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload>[]
          }
          create: {
            args: Prisma.correoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload>
          }
          createMany: {
            args: Prisma.correoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.correoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload>[]
          }
          delete: {
            args: Prisma.correoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload>
          }
          update: {
            args: Prisma.correoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload>
          }
          deleteMany: {
            args: Prisma.correoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.correoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.correoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$correoPayload>
          }
          aggregate: {
            args: Prisma.CorreoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCorreo>
          }
          groupBy: {
            args: Prisma.correoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CorreoGroupByOutputType>[]
          }
          count: {
            args: Prisma.correoCountArgs<ExtArgs>,
            result: $Utils.Optional<CorreoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    direccionfavorita: number
    direcciones_bloqueada: number
    correos: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    direccionfavorita?: boolean | UsuarioCountOutputTypeCountDireccionfavoritaArgs
    direcciones_bloqueada?: boolean | UsuarioCountOutputTypeCountDirecciones_bloqueadaArgs
    correos?: boolean | UsuarioCountOutputTypeCountCorreosArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountDireccionfavoritaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DireccionesFavoritasWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountDirecciones_bloqueadaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: direcciones_bloqueadasWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCorreosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: correoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion_correo: string | null
    descripcion: string | null
    fecha_creacion: Date | null
    clave: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion_correo: string | null
    descripcion: string | null
    fecha_creacion: Date | null
    clave: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nombre: number
    direccion_correo: number
    descripcion: number
    fecha_creacion: number
    clave: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion_correo?: true
    descripcion?: true
    fecha_creacion?: true
    clave?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion_correo?: true
    descripcion?: true
    fecha_creacion?: true
    clave?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion_correo?: true
    descripcion?: true
    fecha_creacion?: true
    clave?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date
    clave: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion_correo?: boolean
    descripcion?: boolean
    fecha_creacion?: boolean
    clave?: boolean
    direccionfavorita?: boolean | usuario$direccionfavoritaArgs<ExtArgs>
    direcciones_bloqueada?: boolean | usuario$direcciones_bloqueadaArgs<ExtArgs>
    correos?: boolean | usuario$correosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion_correo?: boolean
    descripcion?: boolean
    fecha_creacion?: boolean
    clave?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion_correo?: boolean
    descripcion?: boolean
    fecha_creacion?: boolean
    clave?: boolean
  }

  export type usuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    direccionfavorita?: boolean | usuario$direccionfavoritaArgs<ExtArgs>
    direcciones_bloqueada?: boolean | usuario$direcciones_bloqueadaArgs<ExtArgs>
    correos?: boolean | usuario$correosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {
      direccionfavorita: Prisma.$DireccionesFavoritasPayload<ExtArgs>[]
      direcciones_bloqueada: Prisma.$direcciones_bloqueadasPayload<ExtArgs>[]
      correos: Prisma.$correoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      direccion_correo: string
      descripcion: string
      fecha_creacion: Date
      clave: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {usuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends usuarioCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    direccionfavorita<T extends usuario$direccionfavoritaArgs<ExtArgs> = {}>(args?: Subset<T, usuario$direccionfavoritaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'findMany'> | Null>;

    direcciones_bloqueada<T extends usuario$direcciones_bloqueadaArgs<ExtArgs> = {}>(args?: Subset<T, usuario$direcciones_bloqueadaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'findMany'> | Null>;

    correos<T extends usuario$correosArgs<ExtArgs> = {}>(args?: Subset<T, usuario$correosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly id: FieldRef<"usuario", 'Int'>
    readonly nombre: FieldRef<"usuario", 'String'>
    readonly direccion_correo: FieldRef<"usuario", 'String'>
    readonly descripcion: FieldRef<"usuario", 'String'>
    readonly fecha_creacion: FieldRef<"usuario", 'DateTime'>
    readonly clave: FieldRef<"usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }

  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuario createManyAndReturn
   */
  export type usuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }

  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario.direccionfavorita
   */
  export type usuario$direccionfavoritaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    where?: DireccionesFavoritasWhereInput
    orderBy?: DireccionesFavoritasOrderByWithRelationInput | DireccionesFavoritasOrderByWithRelationInput[]
    cursor?: DireccionesFavoritasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DireccionesFavoritasScalarFieldEnum | DireccionesFavoritasScalarFieldEnum[]
  }

  /**
   * usuario.direcciones_bloqueada
   */
  export type usuario$direcciones_bloqueadaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    where?: direcciones_bloqueadasWhereInput
    orderBy?: direcciones_bloqueadasOrderByWithRelationInput | direcciones_bloqueadasOrderByWithRelationInput[]
    cursor?: direcciones_bloqueadasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Direcciones_bloqueadasScalarFieldEnum | Direcciones_bloqueadasScalarFieldEnum[]
  }

  /**
   * usuario.correos
   */
  export type usuario$correosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    where?: correoWhereInput
    orderBy?: correoOrderByWithRelationInput | correoOrderByWithRelationInput[]
    cursor?: correoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorreoScalarFieldEnum | CorreoScalarFieldEnum[]
  }

  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
  }


  /**
   * Model DireccionesFavoritas
   */

  export type AggregateDireccionesFavoritas = {
    _count: DireccionesFavoritasCountAggregateOutputType | null
    _avg: DireccionesFavoritasAvgAggregateOutputType | null
    _sum: DireccionesFavoritasSumAggregateOutputType | null
    _min: DireccionesFavoritasMinAggregateOutputType | null
    _max: DireccionesFavoritasMaxAggregateOutputType | null
  }

  export type DireccionesFavoritasAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type DireccionesFavoritasSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type DireccionesFavoritasMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    fecha_agregado: Date | null
    direccion_favorita: string | null
  }

  export type DireccionesFavoritasMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    fecha_agregado: Date | null
    direccion_favorita: string | null
  }

  export type DireccionesFavoritasCountAggregateOutputType = {
    id: number
    usuario_id: number
    fecha_agregado: number
    direccion_favorita: number
    _all: number
  }


  export type DireccionesFavoritasAvgAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type DireccionesFavoritasSumAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type DireccionesFavoritasMinAggregateInputType = {
    id?: true
    usuario_id?: true
    fecha_agregado?: true
    direccion_favorita?: true
  }

  export type DireccionesFavoritasMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    fecha_agregado?: true
    direccion_favorita?: true
  }

  export type DireccionesFavoritasCountAggregateInputType = {
    id?: true
    usuario_id?: true
    fecha_agregado?: true
    direccion_favorita?: true
    _all?: true
  }

  export type DireccionesFavoritasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DireccionesFavoritas to aggregate.
     */
    where?: DireccionesFavoritasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DireccionesFavoritas to fetch.
     */
    orderBy?: DireccionesFavoritasOrderByWithRelationInput | DireccionesFavoritasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DireccionesFavoritasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DireccionesFavoritas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DireccionesFavoritas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DireccionesFavoritas
    **/
    _count?: true | DireccionesFavoritasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DireccionesFavoritasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DireccionesFavoritasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DireccionesFavoritasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DireccionesFavoritasMaxAggregateInputType
  }

  export type GetDireccionesFavoritasAggregateType<T extends DireccionesFavoritasAggregateArgs> = {
        [P in keyof T & keyof AggregateDireccionesFavoritas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDireccionesFavoritas[P]>
      : GetScalarType<T[P], AggregateDireccionesFavoritas[P]>
  }




  export type DireccionesFavoritasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DireccionesFavoritasWhereInput
    orderBy?: DireccionesFavoritasOrderByWithAggregationInput | DireccionesFavoritasOrderByWithAggregationInput[]
    by: DireccionesFavoritasScalarFieldEnum[] | DireccionesFavoritasScalarFieldEnum
    having?: DireccionesFavoritasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DireccionesFavoritasCountAggregateInputType | true
    _avg?: DireccionesFavoritasAvgAggregateInputType
    _sum?: DireccionesFavoritasSumAggregateInputType
    _min?: DireccionesFavoritasMinAggregateInputType
    _max?: DireccionesFavoritasMaxAggregateInputType
  }

  export type DireccionesFavoritasGroupByOutputType = {
    id: number
    usuario_id: number
    fecha_agregado: Date
    direccion_favorita: string
    _count: DireccionesFavoritasCountAggregateOutputType | null
    _avg: DireccionesFavoritasAvgAggregateOutputType | null
    _sum: DireccionesFavoritasSumAggregateOutputType | null
    _min: DireccionesFavoritasMinAggregateOutputType | null
    _max: DireccionesFavoritasMaxAggregateOutputType | null
  }

  type GetDireccionesFavoritasGroupByPayload<T extends DireccionesFavoritasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DireccionesFavoritasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DireccionesFavoritasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DireccionesFavoritasGroupByOutputType[P]>
            : GetScalarType<T[P], DireccionesFavoritasGroupByOutputType[P]>
        }
      >
    >


  export type DireccionesFavoritasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    fecha_agregado?: boolean
    direccion_favorita?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["direccionesFavoritas"]>

  export type DireccionesFavoritasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    fecha_agregado?: boolean
    direccion_favorita?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["direccionesFavoritas"]>

  export type DireccionesFavoritasSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    fecha_agregado?: boolean
    direccion_favorita?: boolean
  }

  export type DireccionesFavoritasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }
  export type DireccionesFavoritasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }

  export type $DireccionesFavoritasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DireccionesFavoritas"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number
      fecha_agregado: Date
      direccion_favorita: string
    }, ExtArgs["result"]["direccionesFavoritas"]>
    composites: {}
  }

  type DireccionesFavoritasGetPayload<S extends boolean | null | undefined | DireccionesFavoritasDefaultArgs> = $Result.GetResult<Prisma.$DireccionesFavoritasPayload, S>

  type DireccionesFavoritasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DireccionesFavoritasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DireccionesFavoritasCountAggregateInputType | true
    }

  export interface DireccionesFavoritasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DireccionesFavoritas'], meta: { name: 'DireccionesFavoritas' } }
    /**
     * Find zero or one DireccionesFavoritas that matches the filter.
     * @param {DireccionesFavoritasFindUniqueArgs} args - Arguments to find a DireccionesFavoritas
     * @example
     * // Get one DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DireccionesFavoritasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DireccionesFavoritasFindUniqueArgs<ExtArgs>>
    ): Prisma__DireccionesFavoritasClient<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DireccionesFavoritas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DireccionesFavoritasFindUniqueOrThrowArgs} args - Arguments to find a DireccionesFavoritas
     * @example
     * // Get one DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DireccionesFavoritasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DireccionesFavoritasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DireccionesFavoritasClient<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DireccionesFavoritas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionesFavoritasFindFirstArgs} args - Arguments to find a DireccionesFavoritas
     * @example
     * // Get one DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DireccionesFavoritasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DireccionesFavoritasFindFirstArgs<ExtArgs>>
    ): Prisma__DireccionesFavoritasClient<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DireccionesFavoritas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionesFavoritasFindFirstOrThrowArgs} args - Arguments to find a DireccionesFavoritas
     * @example
     * // Get one DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DireccionesFavoritasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DireccionesFavoritasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DireccionesFavoritasClient<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DireccionesFavoritas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionesFavoritasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.findMany()
     * 
     * // Get first 10 DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const direccionesFavoritasWithIdOnly = await prisma.direccionesFavoritas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DireccionesFavoritasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DireccionesFavoritasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DireccionesFavoritas.
     * @param {DireccionesFavoritasCreateArgs} args - Arguments to create a DireccionesFavoritas.
     * @example
     * // Create one DireccionesFavoritas
     * const DireccionesFavoritas = await prisma.direccionesFavoritas.create({
     *   data: {
     *     // ... data to create a DireccionesFavoritas
     *   }
     * })
     * 
    **/
    create<T extends DireccionesFavoritasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DireccionesFavoritasCreateArgs<ExtArgs>>
    ): Prisma__DireccionesFavoritasClient<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DireccionesFavoritas.
     * @param {DireccionesFavoritasCreateManyArgs} args - Arguments to create many DireccionesFavoritas.
     * @example
     * // Create many DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DireccionesFavoritasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DireccionesFavoritasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DireccionesFavoritas and returns the data saved in the database.
     * @param {DireccionesFavoritasCreateManyAndReturnArgs} args - Arguments to create many DireccionesFavoritas.
     * @example
     * // Create many DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DireccionesFavoritas and only return the `id`
     * const direccionesFavoritasWithIdOnly = await prisma.direccionesFavoritas.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends DireccionesFavoritasCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, DireccionesFavoritasCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a DireccionesFavoritas.
     * @param {DireccionesFavoritasDeleteArgs} args - Arguments to delete one DireccionesFavoritas.
     * @example
     * // Delete one DireccionesFavoritas
     * const DireccionesFavoritas = await prisma.direccionesFavoritas.delete({
     *   where: {
     *     // ... filter to delete one DireccionesFavoritas
     *   }
     * })
     * 
    **/
    delete<T extends DireccionesFavoritasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DireccionesFavoritasDeleteArgs<ExtArgs>>
    ): Prisma__DireccionesFavoritasClient<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DireccionesFavoritas.
     * @param {DireccionesFavoritasUpdateArgs} args - Arguments to update one DireccionesFavoritas.
     * @example
     * // Update one DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DireccionesFavoritasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DireccionesFavoritasUpdateArgs<ExtArgs>>
    ): Prisma__DireccionesFavoritasClient<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DireccionesFavoritas.
     * @param {DireccionesFavoritasDeleteManyArgs} args - Arguments to filter DireccionesFavoritas to delete.
     * @example
     * // Delete a few DireccionesFavoritas
     * const { count } = await prisma.direccionesFavoritas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DireccionesFavoritasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DireccionesFavoritasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DireccionesFavoritas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionesFavoritasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DireccionesFavoritasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DireccionesFavoritasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DireccionesFavoritas.
     * @param {DireccionesFavoritasUpsertArgs} args - Arguments to update or create a DireccionesFavoritas.
     * @example
     * // Update or create a DireccionesFavoritas
     * const direccionesFavoritas = await prisma.direccionesFavoritas.upsert({
     *   create: {
     *     // ... data to create a DireccionesFavoritas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DireccionesFavoritas we want to update
     *   }
     * })
    **/
    upsert<T extends DireccionesFavoritasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DireccionesFavoritasUpsertArgs<ExtArgs>>
    ): Prisma__DireccionesFavoritasClient<$Result.GetResult<Prisma.$DireccionesFavoritasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DireccionesFavoritas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionesFavoritasCountArgs} args - Arguments to filter DireccionesFavoritas to count.
     * @example
     * // Count the number of DireccionesFavoritas
     * const count = await prisma.direccionesFavoritas.count({
     *   where: {
     *     // ... the filter for the DireccionesFavoritas we want to count
     *   }
     * })
    **/
    count<T extends DireccionesFavoritasCountArgs>(
      args?: Subset<T, DireccionesFavoritasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DireccionesFavoritasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DireccionesFavoritas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionesFavoritasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DireccionesFavoritasAggregateArgs>(args: Subset<T, DireccionesFavoritasAggregateArgs>): Prisma.PrismaPromise<GetDireccionesFavoritasAggregateType<T>>

    /**
     * Group by DireccionesFavoritas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionesFavoritasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DireccionesFavoritasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DireccionesFavoritasGroupByArgs['orderBy'] }
        : { orderBy?: DireccionesFavoritasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DireccionesFavoritasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDireccionesFavoritasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DireccionesFavoritas model
   */
  readonly fields: DireccionesFavoritasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DireccionesFavoritas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DireccionesFavoritasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DireccionesFavoritas model
   */ 
  interface DireccionesFavoritasFieldRefs {
    readonly id: FieldRef<"DireccionesFavoritas", 'Int'>
    readonly usuario_id: FieldRef<"DireccionesFavoritas", 'Int'>
    readonly fecha_agregado: FieldRef<"DireccionesFavoritas", 'DateTime'>
    readonly direccion_favorita: FieldRef<"DireccionesFavoritas", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DireccionesFavoritas findUnique
   */
  export type DireccionesFavoritasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * Filter, which DireccionesFavoritas to fetch.
     */
    where: DireccionesFavoritasWhereUniqueInput
  }

  /**
   * DireccionesFavoritas findUniqueOrThrow
   */
  export type DireccionesFavoritasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * Filter, which DireccionesFavoritas to fetch.
     */
    where: DireccionesFavoritasWhereUniqueInput
  }

  /**
   * DireccionesFavoritas findFirst
   */
  export type DireccionesFavoritasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * Filter, which DireccionesFavoritas to fetch.
     */
    where?: DireccionesFavoritasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DireccionesFavoritas to fetch.
     */
    orderBy?: DireccionesFavoritasOrderByWithRelationInput | DireccionesFavoritasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DireccionesFavoritas.
     */
    cursor?: DireccionesFavoritasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DireccionesFavoritas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DireccionesFavoritas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DireccionesFavoritas.
     */
    distinct?: DireccionesFavoritasScalarFieldEnum | DireccionesFavoritasScalarFieldEnum[]
  }

  /**
   * DireccionesFavoritas findFirstOrThrow
   */
  export type DireccionesFavoritasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * Filter, which DireccionesFavoritas to fetch.
     */
    where?: DireccionesFavoritasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DireccionesFavoritas to fetch.
     */
    orderBy?: DireccionesFavoritasOrderByWithRelationInput | DireccionesFavoritasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DireccionesFavoritas.
     */
    cursor?: DireccionesFavoritasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DireccionesFavoritas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DireccionesFavoritas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DireccionesFavoritas.
     */
    distinct?: DireccionesFavoritasScalarFieldEnum | DireccionesFavoritasScalarFieldEnum[]
  }

  /**
   * DireccionesFavoritas findMany
   */
  export type DireccionesFavoritasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * Filter, which DireccionesFavoritas to fetch.
     */
    where?: DireccionesFavoritasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DireccionesFavoritas to fetch.
     */
    orderBy?: DireccionesFavoritasOrderByWithRelationInput | DireccionesFavoritasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DireccionesFavoritas.
     */
    cursor?: DireccionesFavoritasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DireccionesFavoritas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DireccionesFavoritas.
     */
    skip?: number
    distinct?: DireccionesFavoritasScalarFieldEnum | DireccionesFavoritasScalarFieldEnum[]
  }

  /**
   * DireccionesFavoritas create
   */
  export type DireccionesFavoritasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * The data needed to create a DireccionesFavoritas.
     */
    data: XOR<DireccionesFavoritasCreateInput, DireccionesFavoritasUncheckedCreateInput>
  }

  /**
   * DireccionesFavoritas createMany
   */
  export type DireccionesFavoritasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DireccionesFavoritas.
     */
    data: DireccionesFavoritasCreateManyInput | DireccionesFavoritasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DireccionesFavoritas createManyAndReturn
   */
  export type DireccionesFavoritasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DireccionesFavoritas.
     */
    data: DireccionesFavoritasCreateManyInput | DireccionesFavoritasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DireccionesFavoritas update
   */
  export type DireccionesFavoritasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * The data needed to update a DireccionesFavoritas.
     */
    data: XOR<DireccionesFavoritasUpdateInput, DireccionesFavoritasUncheckedUpdateInput>
    /**
     * Choose, which DireccionesFavoritas to update.
     */
    where: DireccionesFavoritasWhereUniqueInput
  }

  /**
   * DireccionesFavoritas updateMany
   */
  export type DireccionesFavoritasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DireccionesFavoritas.
     */
    data: XOR<DireccionesFavoritasUpdateManyMutationInput, DireccionesFavoritasUncheckedUpdateManyInput>
    /**
     * Filter which DireccionesFavoritas to update
     */
    where?: DireccionesFavoritasWhereInput
  }

  /**
   * DireccionesFavoritas upsert
   */
  export type DireccionesFavoritasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * The filter to search for the DireccionesFavoritas to update in case it exists.
     */
    where: DireccionesFavoritasWhereUniqueInput
    /**
     * In case the DireccionesFavoritas found by the `where` argument doesn't exist, create a new DireccionesFavoritas with this data.
     */
    create: XOR<DireccionesFavoritasCreateInput, DireccionesFavoritasUncheckedCreateInput>
    /**
     * In case the DireccionesFavoritas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DireccionesFavoritasUpdateInput, DireccionesFavoritasUncheckedUpdateInput>
  }

  /**
   * DireccionesFavoritas delete
   */
  export type DireccionesFavoritasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
    /**
     * Filter which DireccionesFavoritas to delete.
     */
    where: DireccionesFavoritasWhereUniqueInput
  }

  /**
   * DireccionesFavoritas deleteMany
   */
  export type DireccionesFavoritasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DireccionesFavoritas to delete
     */
    where?: DireccionesFavoritasWhereInput
  }

  /**
   * DireccionesFavoritas without action
   */
  export type DireccionesFavoritasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireccionesFavoritas
     */
    select?: DireccionesFavoritasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireccionesFavoritasInclude<ExtArgs> | null
  }


  /**
   * Model direcciones_bloqueadas
   */

  export type AggregateDirecciones_bloqueadas = {
    _count: Direcciones_bloqueadasCountAggregateOutputType | null
    _avg: Direcciones_bloqueadasAvgAggregateOutputType | null
    _sum: Direcciones_bloqueadasSumAggregateOutputType | null
    _min: Direcciones_bloqueadasMinAggregateOutputType | null
    _max: Direcciones_bloqueadasMaxAggregateOutputType | null
  }

  export type Direcciones_bloqueadasAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type Direcciones_bloqueadasSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type Direcciones_bloqueadasMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    fecha_bloqueo: Date | null
    direccion_bloqueada: string | null
  }

  export type Direcciones_bloqueadasMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    fecha_bloqueo: Date | null
    direccion_bloqueada: string | null
  }

  export type Direcciones_bloqueadasCountAggregateOutputType = {
    id: number
    usuario_id: number
    fecha_bloqueo: number
    direccion_bloqueada: number
    _all: number
  }


  export type Direcciones_bloqueadasAvgAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type Direcciones_bloqueadasSumAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type Direcciones_bloqueadasMinAggregateInputType = {
    id?: true
    usuario_id?: true
    fecha_bloqueo?: true
    direccion_bloqueada?: true
  }

  export type Direcciones_bloqueadasMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    fecha_bloqueo?: true
    direccion_bloqueada?: true
  }

  export type Direcciones_bloqueadasCountAggregateInputType = {
    id?: true
    usuario_id?: true
    fecha_bloqueo?: true
    direccion_bloqueada?: true
    _all?: true
  }

  export type Direcciones_bloqueadasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which direcciones_bloqueadas to aggregate.
     */
    where?: direcciones_bloqueadasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of direcciones_bloqueadas to fetch.
     */
    orderBy?: direcciones_bloqueadasOrderByWithRelationInput | direcciones_bloqueadasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: direcciones_bloqueadasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` direcciones_bloqueadas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` direcciones_bloqueadas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned direcciones_bloqueadas
    **/
    _count?: true | Direcciones_bloqueadasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Direcciones_bloqueadasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Direcciones_bloqueadasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Direcciones_bloqueadasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Direcciones_bloqueadasMaxAggregateInputType
  }

  export type GetDirecciones_bloqueadasAggregateType<T extends Direcciones_bloqueadasAggregateArgs> = {
        [P in keyof T & keyof AggregateDirecciones_bloqueadas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDirecciones_bloqueadas[P]>
      : GetScalarType<T[P], AggregateDirecciones_bloqueadas[P]>
  }




  export type direcciones_bloqueadasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: direcciones_bloqueadasWhereInput
    orderBy?: direcciones_bloqueadasOrderByWithAggregationInput | direcciones_bloqueadasOrderByWithAggregationInput[]
    by: Direcciones_bloqueadasScalarFieldEnum[] | Direcciones_bloqueadasScalarFieldEnum
    having?: direcciones_bloqueadasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Direcciones_bloqueadasCountAggregateInputType | true
    _avg?: Direcciones_bloqueadasAvgAggregateInputType
    _sum?: Direcciones_bloqueadasSumAggregateInputType
    _min?: Direcciones_bloqueadasMinAggregateInputType
    _max?: Direcciones_bloqueadasMaxAggregateInputType
  }

  export type Direcciones_bloqueadasGroupByOutputType = {
    id: number
    usuario_id: number
    fecha_bloqueo: Date
    direccion_bloqueada: string
    _count: Direcciones_bloqueadasCountAggregateOutputType | null
    _avg: Direcciones_bloqueadasAvgAggregateOutputType | null
    _sum: Direcciones_bloqueadasSumAggregateOutputType | null
    _min: Direcciones_bloqueadasMinAggregateOutputType | null
    _max: Direcciones_bloqueadasMaxAggregateOutputType | null
  }

  type GetDirecciones_bloqueadasGroupByPayload<T extends direcciones_bloqueadasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Direcciones_bloqueadasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Direcciones_bloqueadasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Direcciones_bloqueadasGroupByOutputType[P]>
            : GetScalarType<T[P], Direcciones_bloqueadasGroupByOutputType[P]>
        }
      >
    >


  export type direcciones_bloqueadasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    fecha_bloqueo?: boolean
    direccion_bloqueada?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["direcciones_bloqueadas"]>

  export type direcciones_bloqueadasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    fecha_bloqueo?: boolean
    direccion_bloqueada?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["direcciones_bloqueadas"]>

  export type direcciones_bloqueadasSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    fecha_bloqueo?: boolean
    direccion_bloqueada?: boolean
  }

  export type direcciones_bloqueadasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }
  export type direcciones_bloqueadasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }

  export type $direcciones_bloqueadasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "direcciones_bloqueadas"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number
      fecha_bloqueo: Date
      direccion_bloqueada: string
    }, ExtArgs["result"]["direcciones_bloqueadas"]>
    composites: {}
  }

  type direcciones_bloqueadasGetPayload<S extends boolean | null | undefined | direcciones_bloqueadasDefaultArgs> = $Result.GetResult<Prisma.$direcciones_bloqueadasPayload, S>

  type direcciones_bloqueadasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<direcciones_bloqueadasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Direcciones_bloqueadasCountAggregateInputType | true
    }

  export interface direcciones_bloqueadasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['direcciones_bloqueadas'], meta: { name: 'direcciones_bloqueadas' } }
    /**
     * Find zero or one Direcciones_bloqueadas that matches the filter.
     * @param {direcciones_bloqueadasFindUniqueArgs} args - Arguments to find a Direcciones_bloqueadas
     * @example
     * // Get one Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends direcciones_bloqueadasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, direcciones_bloqueadasFindUniqueArgs<ExtArgs>>
    ): Prisma__direcciones_bloqueadasClient<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Direcciones_bloqueadas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {direcciones_bloqueadasFindUniqueOrThrowArgs} args - Arguments to find a Direcciones_bloqueadas
     * @example
     * // Get one Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends direcciones_bloqueadasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, direcciones_bloqueadasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__direcciones_bloqueadasClient<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Direcciones_bloqueadas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {direcciones_bloqueadasFindFirstArgs} args - Arguments to find a Direcciones_bloqueadas
     * @example
     * // Get one Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends direcciones_bloqueadasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, direcciones_bloqueadasFindFirstArgs<ExtArgs>>
    ): Prisma__direcciones_bloqueadasClient<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Direcciones_bloqueadas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {direcciones_bloqueadasFindFirstOrThrowArgs} args - Arguments to find a Direcciones_bloqueadas
     * @example
     * // Get one Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends direcciones_bloqueadasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, direcciones_bloqueadasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__direcciones_bloqueadasClient<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Direcciones_bloqueadas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {direcciones_bloqueadasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.findMany()
     * 
     * // Get first 10 Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const direcciones_bloqueadasWithIdOnly = await prisma.direcciones_bloqueadas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends direcciones_bloqueadasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, direcciones_bloqueadasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Direcciones_bloqueadas.
     * @param {direcciones_bloqueadasCreateArgs} args - Arguments to create a Direcciones_bloqueadas.
     * @example
     * // Create one Direcciones_bloqueadas
     * const Direcciones_bloqueadas = await prisma.direcciones_bloqueadas.create({
     *   data: {
     *     // ... data to create a Direcciones_bloqueadas
     *   }
     * })
     * 
    **/
    create<T extends direcciones_bloqueadasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, direcciones_bloqueadasCreateArgs<ExtArgs>>
    ): Prisma__direcciones_bloqueadasClient<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Direcciones_bloqueadas.
     * @param {direcciones_bloqueadasCreateManyArgs} args - Arguments to create many Direcciones_bloqueadas.
     * @example
     * // Create many Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends direcciones_bloqueadasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, direcciones_bloqueadasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Direcciones_bloqueadas and returns the data saved in the database.
     * @param {direcciones_bloqueadasCreateManyAndReturnArgs} args - Arguments to create many Direcciones_bloqueadas.
     * @example
     * // Create many Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Direcciones_bloqueadas and only return the `id`
     * const direcciones_bloqueadasWithIdOnly = await prisma.direcciones_bloqueadas.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends direcciones_bloqueadasCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, direcciones_bloqueadasCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Direcciones_bloqueadas.
     * @param {direcciones_bloqueadasDeleteArgs} args - Arguments to delete one Direcciones_bloqueadas.
     * @example
     * // Delete one Direcciones_bloqueadas
     * const Direcciones_bloqueadas = await prisma.direcciones_bloqueadas.delete({
     *   where: {
     *     // ... filter to delete one Direcciones_bloqueadas
     *   }
     * })
     * 
    **/
    delete<T extends direcciones_bloqueadasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, direcciones_bloqueadasDeleteArgs<ExtArgs>>
    ): Prisma__direcciones_bloqueadasClient<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Direcciones_bloqueadas.
     * @param {direcciones_bloqueadasUpdateArgs} args - Arguments to update one Direcciones_bloqueadas.
     * @example
     * // Update one Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends direcciones_bloqueadasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, direcciones_bloqueadasUpdateArgs<ExtArgs>>
    ): Prisma__direcciones_bloqueadasClient<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Direcciones_bloqueadas.
     * @param {direcciones_bloqueadasDeleteManyArgs} args - Arguments to filter Direcciones_bloqueadas to delete.
     * @example
     * // Delete a few Direcciones_bloqueadas
     * const { count } = await prisma.direcciones_bloqueadas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends direcciones_bloqueadasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, direcciones_bloqueadasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Direcciones_bloqueadas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {direcciones_bloqueadasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends direcciones_bloqueadasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, direcciones_bloqueadasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Direcciones_bloqueadas.
     * @param {direcciones_bloqueadasUpsertArgs} args - Arguments to update or create a Direcciones_bloqueadas.
     * @example
     * // Update or create a Direcciones_bloqueadas
     * const direcciones_bloqueadas = await prisma.direcciones_bloqueadas.upsert({
     *   create: {
     *     // ... data to create a Direcciones_bloqueadas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Direcciones_bloqueadas we want to update
     *   }
     * })
    **/
    upsert<T extends direcciones_bloqueadasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, direcciones_bloqueadasUpsertArgs<ExtArgs>>
    ): Prisma__direcciones_bloqueadasClient<$Result.GetResult<Prisma.$direcciones_bloqueadasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Direcciones_bloqueadas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {direcciones_bloqueadasCountArgs} args - Arguments to filter Direcciones_bloqueadas to count.
     * @example
     * // Count the number of Direcciones_bloqueadas
     * const count = await prisma.direcciones_bloqueadas.count({
     *   where: {
     *     // ... the filter for the Direcciones_bloqueadas we want to count
     *   }
     * })
    **/
    count<T extends direcciones_bloqueadasCountArgs>(
      args?: Subset<T, direcciones_bloqueadasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Direcciones_bloqueadasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Direcciones_bloqueadas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Direcciones_bloqueadasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Direcciones_bloqueadasAggregateArgs>(args: Subset<T, Direcciones_bloqueadasAggregateArgs>): Prisma.PrismaPromise<GetDirecciones_bloqueadasAggregateType<T>>

    /**
     * Group by Direcciones_bloqueadas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {direcciones_bloqueadasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends direcciones_bloqueadasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: direcciones_bloqueadasGroupByArgs['orderBy'] }
        : { orderBy?: direcciones_bloqueadasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, direcciones_bloqueadasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDirecciones_bloqueadasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the direcciones_bloqueadas model
   */
  readonly fields: direcciones_bloqueadasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for direcciones_bloqueadas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__direcciones_bloqueadasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the direcciones_bloqueadas model
   */ 
  interface direcciones_bloqueadasFieldRefs {
    readonly id: FieldRef<"direcciones_bloqueadas", 'Int'>
    readonly usuario_id: FieldRef<"direcciones_bloqueadas", 'Int'>
    readonly fecha_bloqueo: FieldRef<"direcciones_bloqueadas", 'DateTime'>
    readonly direccion_bloqueada: FieldRef<"direcciones_bloqueadas", 'String'>
  }
    

  // Custom InputTypes
  /**
   * direcciones_bloqueadas findUnique
   */
  export type direcciones_bloqueadasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * Filter, which direcciones_bloqueadas to fetch.
     */
    where: direcciones_bloqueadasWhereUniqueInput
  }

  /**
   * direcciones_bloqueadas findUniqueOrThrow
   */
  export type direcciones_bloqueadasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * Filter, which direcciones_bloqueadas to fetch.
     */
    where: direcciones_bloqueadasWhereUniqueInput
  }

  /**
   * direcciones_bloqueadas findFirst
   */
  export type direcciones_bloqueadasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * Filter, which direcciones_bloqueadas to fetch.
     */
    where?: direcciones_bloqueadasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of direcciones_bloqueadas to fetch.
     */
    orderBy?: direcciones_bloqueadasOrderByWithRelationInput | direcciones_bloqueadasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for direcciones_bloqueadas.
     */
    cursor?: direcciones_bloqueadasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` direcciones_bloqueadas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` direcciones_bloqueadas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of direcciones_bloqueadas.
     */
    distinct?: Direcciones_bloqueadasScalarFieldEnum | Direcciones_bloqueadasScalarFieldEnum[]
  }

  /**
   * direcciones_bloqueadas findFirstOrThrow
   */
  export type direcciones_bloqueadasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * Filter, which direcciones_bloqueadas to fetch.
     */
    where?: direcciones_bloqueadasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of direcciones_bloqueadas to fetch.
     */
    orderBy?: direcciones_bloqueadasOrderByWithRelationInput | direcciones_bloqueadasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for direcciones_bloqueadas.
     */
    cursor?: direcciones_bloqueadasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` direcciones_bloqueadas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` direcciones_bloqueadas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of direcciones_bloqueadas.
     */
    distinct?: Direcciones_bloqueadasScalarFieldEnum | Direcciones_bloqueadasScalarFieldEnum[]
  }

  /**
   * direcciones_bloqueadas findMany
   */
  export type direcciones_bloqueadasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * Filter, which direcciones_bloqueadas to fetch.
     */
    where?: direcciones_bloqueadasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of direcciones_bloqueadas to fetch.
     */
    orderBy?: direcciones_bloqueadasOrderByWithRelationInput | direcciones_bloqueadasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing direcciones_bloqueadas.
     */
    cursor?: direcciones_bloqueadasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` direcciones_bloqueadas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` direcciones_bloqueadas.
     */
    skip?: number
    distinct?: Direcciones_bloqueadasScalarFieldEnum | Direcciones_bloqueadasScalarFieldEnum[]
  }

  /**
   * direcciones_bloqueadas create
   */
  export type direcciones_bloqueadasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * The data needed to create a direcciones_bloqueadas.
     */
    data: XOR<direcciones_bloqueadasCreateInput, direcciones_bloqueadasUncheckedCreateInput>
  }

  /**
   * direcciones_bloqueadas createMany
   */
  export type direcciones_bloqueadasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many direcciones_bloqueadas.
     */
    data: direcciones_bloqueadasCreateManyInput | direcciones_bloqueadasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * direcciones_bloqueadas createManyAndReturn
   */
  export type direcciones_bloqueadasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many direcciones_bloqueadas.
     */
    data: direcciones_bloqueadasCreateManyInput | direcciones_bloqueadasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * direcciones_bloqueadas update
   */
  export type direcciones_bloqueadasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * The data needed to update a direcciones_bloqueadas.
     */
    data: XOR<direcciones_bloqueadasUpdateInput, direcciones_bloqueadasUncheckedUpdateInput>
    /**
     * Choose, which direcciones_bloqueadas to update.
     */
    where: direcciones_bloqueadasWhereUniqueInput
  }

  /**
   * direcciones_bloqueadas updateMany
   */
  export type direcciones_bloqueadasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update direcciones_bloqueadas.
     */
    data: XOR<direcciones_bloqueadasUpdateManyMutationInput, direcciones_bloqueadasUncheckedUpdateManyInput>
    /**
     * Filter which direcciones_bloqueadas to update
     */
    where?: direcciones_bloqueadasWhereInput
  }

  /**
   * direcciones_bloqueadas upsert
   */
  export type direcciones_bloqueadasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * The filter to search for the direcciones_bloqueadas to update in case it exists.
     */
    where: direcciones_bloqueadasWhereUniqueInput
    /**
     * In case the direcciones_bloqueadas found by the `where` argument doesn't exist, create a new direcciones_bloqueadas with this data.
     */
    create: XOR<direcciones_bloqueadasCreateInput, direcciones_bloqueadasUncheckedCreateInput>
    /**
     * In case the direcciones_bloqueadas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<direcciones_bloqueadasUpdateInput, direcciones_bloqueadasUncheckedUpdateInput>
  }

  /**
   * direcciones_bloqueadas delete
   */
  export type direcciones_bloqueadasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
    /**
     * Filter which direcciones_bloqueadas to delete.
     */
    where: direcciones_bloqueadasWhereUniqueInput
  }

  /**
   * direcciones_bloqueadas deleteMany
   */
  export type direcciones_bloqueadasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which direcciones_bloqueadas to delete
     */
    where?: direcciones_bloqueadasWhereInput
  }

  /**
   * direcciones_bloqueadas without action
   */
  export type direcciones_bloqueadasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the direcciones_bloqueadas
     */
    select?: direcciones_bloqueadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: direcciones_bloqueadasInclude<ExtArgs> | null
  }


  /**
   * Model correo
   */

  export type AggregateCorreo = {
    _count: CorreoCountAggregateOutputType | null
    _avg: CorreoAvgAggregateOutputType | null
    _sum: CorreoSumAggregateOutputType | null
    _min: CorreoMinAggregateOutputType | null
    _max: CorreoMaxAggregateOutputType | null
  }

  export type CorreoAvgAggregateOutputType = {
    id: number | null
    remitente: number | null
    destinatarios: number | null
  }

  export type CorreoSumAggregateOutputType = {
    id: number | null
    remitente: number | null
    destinatarios: number | null
  }

  export type CorreoMinAggregateOutputType = {
    id: number | null
    remitente: number | null
    asunto: string | null
    cuerpo: string | null
    fecha_envio: Date | null
    destinatarios: number | null
  }

  export type CorreoMaxAggregateOutputType = {
    id: number | null
    remitente: number | null
    asunto: string | null
    cuerpo: string | null
    fecha_envio: Date | null
    destinatarios: number | null
  }

  export type CorreoCountAggregateOutputType = {
    id: number
    remitente: number
    asunto: number
    cuerpo: number
    fecha_envio: number
    destinatarios: number
    _all: number
  }


  export type CorreoAvgAggregateInputType = {
    id?: true
    remitente?: true
    destinatarios?: true
  }

  export type CorreoSumAggregateInputType = {
    id?: true
    remitente?: true
    destinatarios?: true
  }

  export type CorreoMinAggregateInputType = {
    id?: true
    remitente?: true
    asunto?: true
    cuerpo?: true
    fecha_envio?: true
    destinatarios?: true
  }

  export type CorreoMaxAggregateInputType = {
    id?: true
    remitente?: true
    asunto?: true
    cuerpo?: true
    fecha_envio?: true
    destinatarios?: true
  }

  export type CorreoCountAggregateInputType = {
    id?: true
    remitente?: true
    asunto?: true
    cuerpo?: true
    fecha_envio?: true
    destinatarios?: true
    _all?: true
  }

  export type CorreoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which correo to aggregate.
     */
    where?: correoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of correos to fetch.
     */
    orderBy?: correoOrderByWithRelationInput | correoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: correoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` correos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` correos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned correos
    **/
    _count?: true | CorreoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CorreoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CorreoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorreoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorreoMaxAggregateInputType
  }

  export type GetCorreoAggregateType<T extends CorreoAggregateArgs> = {
        [P in keyof T & keyof AggregateCorreo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorreo[P]>
      : GetScalarType<T[P], AggregateCorreo[P]>
  }




  export type correoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: correoWhereInput
    orderBy?: correoOrderByWithAggregationInput | correoOrderByWithAggregationInput[]
    by: CorreoScalarFieldEnum[] | CorreoScalarFieldEnum
    having?: correoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorreoCountAggregateInputType | true
    _avg?: CorreoAvgAggregateInputType
    _sum?: CorreoSumAggregateInputType
    _min?: CorreoMinAggregateInputType
    _max?: CorreoMaxAggregateInputType
  }

  export type CorreoGroupByOutputType = {
    id: number
    remitente: number
    asunto: string
    cuerpo: string
    fecha_envio: Date
    destinatarios: number
    _count: CorreoCountAggregateOutputType | null
    _avg: CorreoAvgAggregateOutputType | null
    _sum: CorreoSumAggregateOutputType | null
    _min: CorreoMinAggregateOutputType | null
    _max: CorreoMaxAggregateOutputType | null
  }

  type GetCorreoGroupByPayload<T extends correoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorreoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorreoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorreoGroupByOutputType[P]>
            : GetScalarType<T[P], CorreoGroupByOutputType[P]>
        }
      >
    >


  export type correoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    remitente?: boolean
    asunto?: boolean
    cuerpo?: boolean
    fecha_envio?: boolean
    destinatarios?: boolean
    remitenteplop?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["correo"]>

  export type correoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    remitente?: boolean
    asunto?: boolean
    cuerpo?: boolean
    fecha_envio?: boolean
    destinatarios?: boolean
    remitenteplop?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["correo"]>

  export type correoSelectScalar = {
    id?: boolean
    remitente?: boolean
    asunto?: boolean
    cuerpo?: boolean
    fecha_envio?: boolean
    destinatarios?: boolean
  }

  export type correoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    remitenteplop?: boolean | usuarioDefaultArgs<ExtArgs>
  }
  export type correoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    remitenteplop?: boolean | usuarioDefaultArgs<ExtArgs>
  }

  export type $correoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "correo"
    objects: {
      remitenteplop: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      remitente: number
      asunto: string
      cuerpo: string
      fecha_envio: Date
      destinatarios: number
    }, ExtArgs["result"]["correo"]>
    composites: {}
  }

  type correoGetPayload<S extends boolean | null | undefined | correoDefaultArgs> = $Result.GetResult<Prisma.$correoPayload, S>

  type correoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<correoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CorreoCountAggregateInputType | true
    }

  export interface correoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['correo'], meta: { name: 'correo' } }
    /**
     * Find zero or one Correo that matches the filter.
     * @param {correoFindUniqueArgs} args - Arguments to find a Correo
     * @example
     * // Get one Correo
     * const correo = await prisma.correo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends correoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, correoFindUniqueArgs<ExtArgs>>
    ): Prisma__correoClient<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Correo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {correoFindUniqueOrThrowArgs} args - Arguments to find a Correo
     * @example
     * // Get one Correo
     * const correo = await prisma.correo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends correoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, correoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__correoClient<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Correo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {correoFindFirstArgs} args - Arguments to find a Correo
     * @example
     * // Get one Correo
     * const correo = await prisma.correo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends correoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, correoFindFirstArgs<ExtArgs>>
    ): Prisma__correoClient<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Correo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {correoFindFirstOrThrowArgs} args - Arguments to find a Correo
     * @example
     * // Get one Correo
     * const correo = await prisma.correo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends correoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, correoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__correoClient<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Correos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {correoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Correos
     * const correos = await prisma.correo.findMany()
     * 
     * // Get first 10 Correos
     * const correos = await prisma.correo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const correoWithIdOnly = await prisma.correo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends correoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, correoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Correo.
     * @param {correoCreateArgs} args - Arguments to create a Correo.
     * @example
     * // Create one Correo
     * const Correo = await prisma.correo.create({
     *   data: {
     *     // ... data to create a Correo
     *   }
     * })
     * 
    **/
    create<T extends correoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, correoCreateArgs<ExtArgs>>
    ): Prisma__correoClient<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Correos.
     * @param {correoCreateManyArgs} args - Arguments to create many Correos.
     * @example
     * // Create many Correos
     * const correo = await prisma.correo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends correoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, correoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Correos and returns the data saved in the database.
     * @param {correoCreateManyAndReturnArgs} args - Arguments to create many Correos.
     * @example
     * // Create many Correos
     * const correo = await prisma.correo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Correos and only return the `id`
     * const correoWithIdOnly = await prisma.correo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends correoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, correoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Correo.
     * @param {correoDeleteArgs} args - Arguments to delete one Correo.
     * @example
     * // Delete one Correo
     * const Correo = await prisma.correo.delete({
     *   where: {
     *     // ... filter to delete one Correo
     *   }
     * })
     * 
    **/
    delete<T extends correoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, correoDeleteArgs<ExtArgs>>
    ): Prisma__correoClient<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Correo.
     * @param {correoUpdateArgs} args - Arguments to update one Correo.
     * @example
     * // Update one Correo
     * const correo = await prisma.correo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends correoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, correoUpdateArgs<ExtArgs>>
    ): Prisma__correoClient<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Correos.
     * @param {correoDeleteManyArgs} args - Arguments to filter Correos to delete.
     * @example
     * // Delete a few Correos
     * const { count } = await prisma.correo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends correoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, correoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Correos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {correoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Correos
     * const correo = await prisma.correo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends correoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, correoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Correo.
     * @param {correoUpsertArgs} args - Arguments to update or create a Correo.
     * @example
     * // Update or create a Correo
     * const correo = await prisma.correo.upsert({
     *   create: {
     *     // ... data to create a Correo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Correo we want to update
     *   }
     * })
    **/
    upsert<T extends correoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, correoUpsertArgs<ExtArgs>>
    ): Prisma__correoClient<$Result.GetResult<Prisma.$correoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Correos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {correoCountArgs} args - Arguments to filter Correos to count.
     * @example
     * // Count the number of Correos
     * const count = await prisma.correo.count({
     *   where: {
     *     // ... the filter for the Correos we want to count
     *   }
     * })
    **/
    count<T extends correoCountArgs>(
      args?: Subset<T, correoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorreoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Correo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorreoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorreoAggregateArgs>(args: Subset<T, CorreoAggregateArgs>): Prisma.PrismaPromise<GetCorreoAggregateType<T>>

    /**
     * Group by Correo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {correoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends correoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: correoGroupByArgs['orderBy'] }
        : { orderBy?: correoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, correoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorreoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the correo model
   */
  readonly fields: correoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for correo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__correoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    remitenteplop<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the correo model
   */ 
  interface correoFieldRefs {
    readonly id: FieldRef<"correo", 'Int'>
    readonly remitente: FieldRef<"correo", 'Int'>
    readonly asunto: FieldRef<"correo", 'String'>
    readonly cuerpo: FieldRef<"correo", 'String'>
    readonly fecha_envio: FieldRef<"correo", 'DateTime'>
    readonly destinatarios: FieldRef<"correo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * correo findUnique
   */
  export type correoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * Filter, which correo to fetch.
     */
    where: correoWhereUniqueInput
  }

  /**
   * correo findUniqueOrThrow
   */
  export type correoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * Filter, which correo to fetch.
     */
    where: correoWhereUniqueInput
  }

  /**
   * correo findFirst
   */
  export type correoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * Filter, which correo to fetch.
     */
    where?: correoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of correos to fetch.
     */
    orderBy?: correoOrderByWithRelationInput | correoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for correos.
     */
    cursor?: correoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` correos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` correos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of correos.
     */
    distinct?: CorreoScalarFieldEnum | CorreoScalarFieldEnum[]
  }

  /**
   * correo findFirstOrThrow
   */
  export type correoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * Filter, which correo to fetch.
     */
    where?: correoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of correos to fetch.
     */
    orderBy?: correoOrderByWithRelationInput | correoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for correos.
     */
    cursor?: correoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` correos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` correos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of correos.
     */
    distinct?: CorreoScalarFieldEnum | CorreoScalarFieldEnum[]
  }

  /**
   * correo findMany
   */
  export type correoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * Filter, which correos to fetch.
     */
    where?: correoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of correos to fetch.
     */
    orderBy?: correoOrderByWithRelationInput | correoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing correos.
     */
    cursor?: correoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` correos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` correos.
     */
    skip?: number
    distinct?: CorreoScalarFieldEnum | CorreoScalarFieldEnum[]
  }

  /**
   * correo create
   */
  export type correoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * The data needed to create a correo.
     */
    data: XOR<correoCreateInput, correoUncheckedCreateInput>
  }

  /**
   * correo createMany
   */
  export type correoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many correos.
     */
    data: correoCreateManyInput | correoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * correo createManyAndReturn
   */
  export type correoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many correos.
     */
    data: correoCreateManyInput | correoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * correo update
   */
  export type correoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * The data needed to update a correo.
     */
    data: XOR<correoUpdateInput, correoUncheckedUpdateInput>
    /**
     * Choose, which correo to update.
     */
    where: correoWhereUniqueInput
  }

  /**
   * correo updateMany
   */
  export type correoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update correos.
     */
    data: XOR<correoUpdateManyMutationInput, correoUncheckedUpdateManyInput>
    /**
     * Filter which correos to update
     */
    where?: correoWhereInput
  }

  /**
   * correo upsert
   */
  export type correoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * The filter to search for the correo to update in case it exists.
     */
    where: correoWhereUniqueInput
    /**
     * In case the correo found by the `where` argument doesn't exist, create a new correo with this data.
     */
    create: XOR<correoCreateInput, correoUncheckedCreateInput>
    /**
     * In case the correo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<correoUpdateInput, correoUncheckedUpdateInput>
  }

  /**
   * correo delete
   */
  export type correoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
    /**
     * Filter which correo to delete.
     */
    where: correoWhereUniqueInput
  }

  /**
   * correo deleteMany
   */
  export type correoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which correos to delete
     */
    where?: correoWhereInput
  }

  /**
   * correo without action
   */
  export type correoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the correo
     */
    select?: correoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: correoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion_correo: 'direccion_correo',
    descripcion: 'descripcion',
    fecha_creacion: 'fecha_creacion',
    clave: 'clave'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const DireccionesFavoritasScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    fecha_agregado: 'fecha_agregado',
    direccion_favorita: 'direccion_favorita'
  };

  export type DireccionesFavoritasScalarFieldEnum = (typeof DireccionesFavoritasScalarFieldEnum)[keyof typeof DireccionesFavoritasScalarFieldEnum]


  export const Direcciones_bloqueadasScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    fecha_bloqueo: 'fecha_bloqueo',
    direccion_bloqueada: 'direccion_bloqueada'
  };

  export type Direcciones_bloqueadasScalarFieldEnum = (typeof Direcciones_bloqueadasScalarFieldEnum)[keyof typeof Direcciones_bloqueadasScalarFieldEnum]


  export const CorreoScalarFieldEnum: {
    id: 'id',
    remitente: 'remitente',
    asunto: 'asunto',
    cuerpo: 'cuerpo',
    fecha_envio: 'fecha_envio',
    destinatarios: 'destinatarios'
  };

  export type CorreoScalarFieldEnum = (typeof CorreoScalarFieldEnum)[keyof typeof CorreoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    id?: IntFilter<"usuario"> | number
    nombre?: StringFilter<"usuario"> | string
    direccion_correo?: StringFilter<"usuario"> | string
    descripcion?: StringFilter<"usuario"> | string
    fecha_creacion?: DateTimeFilter<"usuario"> | Date | string
    clave?: StringFilter<"usuario"> | string
    direccionfavorita?: DireccionesFavoritasListRelationFilter
    direcciones_bloqueada?: Direcciones_bloqueadasListRelationFilter
    correos?: CorreoListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion_correo?: SortOrder
    descripcion?: SortOrder
    fecha_creacion?: SortOrder
    clave?: SortOrder
    direccionfavorita?: DireccionesFavoritasOrderByRelationAggregateInput
    direcciones_bloqueada?: direcciones_bloqueadasOrderByRelationAggregateInput
    correos?: correoOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    nombre?: StringFilter<"usuario"> | string
    direccion_correo?: StringFilter<"usuario"> | string
    descripcion?: StringFilter<"usuario"> | string
    fecha_creacion?: DateTimeFilter<"usuario"> | Date | string
    clave?: StringFilter<"usuario"> | string
    direccionfavorita?: DireccionesFavoritasListRelationFilter
    direcciones_bloqueada?: Direcciones_bloqueadasListRelationFilter
    correos?: CorreoListRelationFilter
  }, "id">

  export type usuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion_correo?: SortOrder
    descripcion?: SortOrder
    fecha_creacion?: SortOrder
    clave?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuario"> | number
    nombre?: StringWithAggregatesFilter<"usuario"> | string
    direccion_correo?: StringWithAggregatesFilter<"usuario"> | string
    descripcion?: StringWithAggregatesFilter<"usuario"> | string
    fecha_creacion?: DateTimeWithAggregatesFilter<"usuario"> | Date | string
    clave?: StringWithAggregatesFilter<"usuario"> | string
  }

  export type DireccionesFavoritasWhereInput = {
    AND?: DireccionesFavoritasWhereInput | DireccionesFavoritasWhereInput[]
    OR?: DireccionesFavoritasWhereInput[]
    NOT?: DireccionesFavoritasWhereInput | DireccionesFavoritasWhereInput[]
    id?: IntFilter<"DireccionesFavoritas"> | number
    usuario_id?: IntFilter<"DireccionesFavoritas"> | number
    fecha_agregado?: DateTimeFilter<"DireccionesFavoritas"> | Date | string
    direccion_favorita?: StringFilter<"DireccionesFavoritas"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type DireccionesFavoritasOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_agregado?: SortOrder
    direccion_favorita?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
  }

  export type DireccionesFavoritasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DireccionesFavoritasWhereInput | DireccionesFavoritasWhereInput[]
    OR?: DireccionesFavoritasWhereInput[]
    NOT?: DireccionesFavoritasWhereInput | DireccionesFavoritasWhereInput[]
    usuario_id?: IntFilter<"DireccionesFavoritas"> | number
    fecha_agregado?: DateTimeFilter<"DireccionesFavoritas"> | Date | string
    direccion_favorita?: StringFilter<"DireccionesFavoritas"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "id">

  export type DireccionesFavoritasOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_agregado?: SortOrder
    direccion_favorita?: SortOrder
    _count?: DireccionesFavoritasCountOrderByAggregateInput
    _avg?: DireccionesFavoritasAvgOrderByAggregateInput
    _max?: DireccionesFavoritasMaxOrderByAggregateInput
    _min?: DireccionesFavoritasMinOrderByAggregateInput
    _sum?: DireccionesFavoritasSumOrderByAggregateInput
  }

  export type DireccionesFavoritasScalarWhereWithAggregatesInput = {
    AND?: DireccionesFavoritasScalarWhereWithAggregatesInput | DireccionesFavoritasScalarWhereWithAggregatesInput[]
    OR?: DireccionesFavoritasScalarWhereWithAggregatesInput[]
    NOT?: DireccionesFavoritasScalarWhereWithAggregatesInput | DireccionesFavoritasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DireccionesFavoritas"> | number
    usuario_id?: IntWithAggregatesFilter<"DireccionesFavoritas"> | number
    fecha_agregado?: DateTimeWithAggregatesFilter<"DireccionesFavoritas"> | Date | string
    direccion_favorita?: StringWithAggregatesFilter<"DireccionesFavoritas"> | string
  }

  export type direcciones_bloqueadasWhereInput = {
    AND?: direcciones_bloqueadasWhereInput | direcciones_bloqueadasWhereInput[]
    OR?: direcciones_bloqueadasWhereInput[]
    NOT?: direcciones_bloqueadasWhereInput | direcciones_bloqueadasWhereInput[]
    id?: IntFilter<"direcciones_bloqueadas"> | number
    usuario_id?: IntFilter<"direcciones_bloqueadas"> | number
    fecha_bloqueo?: DateTimeFilter<"direcciones_bloqueadas"> | Date | string
    direccion_bloqueada?: StringFilter<"direcciones_bloqueadas"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type direcciones_bloqueadasOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_bloqueo?: SortOrder
    direccion_bloqueada?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
  }

  export type direcciones_bloqueadasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: direcciones_bloqueadasWhereInput | direcciones_bloqueadasWhereInput[]
    OR?: direcciones_bloqueadasWhereInput[]
    NOT?: direcciones_bloqueadasWhereInput | direcciones_bloqueadasWhereInput[]
    usuario_id?: IntFilter<"direcciones_bloqueadas"> | number
    fecha_bloqueo?: DateTimeFilter<"direcciones_bloqueadas"> | Date | string
    direccion_bloqueada?: StringFilter<"direcciones_bloqueadas"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "id">

  export type direcciones_bloqueadasOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_bloqueo?: SortOrder
    direccion_bloqueada?: SortOrder
    _count?: direcciones_bloqueadasCountOrderByAggregateInput
    _avg?: direcciones_bloqueadasAvgOrderByAggregateInput
    _max?: direcciones_bloqueadasMaxOrderByAggregateInput
    _min?: direcciones_bloqueadasMinOrderByAggregateInput
    _sum?: direcciones_bloqueadasSumOrderByAggregateInput
  }

  export type direcciones_bloqueadasScalarWhereWithAggregatesInput = {
    AND?: direcciones_bloqueadasScalarWhereWithAggregatesInput | direcciones_bloqueadasScalarWhereWithAggregatesInput[]
    OR?: direcciones_bloqueadasScalarWhereWithAggregatesInput[]
    NOT?: direcciones_bloqueadasScalarWhereWithAggregatesInput | direcciones_bloqueadasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"direcciones_bloqueadas"> | number
    usuario_id?: IntWithAggregatesFilter<"direcciones_bloqueadas"> | number
    fecha_bloqueo?: DateTimeWithAggregatesFilter<"direcciones_bloqueadas"> | Date | string
    direccion_bloqueada?: StringWithAggregatesFilter<"direcciones_bloqueadas"> | string
  }

  export type correoWhereInput = {
    AND?: correoWhereInput | correoWhereInput[]
    OR?: correoWhereInput[]
    NOT?: correoWhereInput | correoWhereInput[]
    id?: IntFilter<"correo"> | number
    remitente?: IntFilter<"correo"> | number
    asunto?: StringFilter<"correo"> | string
    cuerpo?: StringFilter<"correo"> | string
    fecha_envio?: DateTimeFilter<"correo"> | Date | string
    destinatarios?: IntFilter<"correo"> | number
    remitenteplop?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type correoOrderByWithRelationInput = {
    id?: SortOrder
    remitente?: SortOrder
    asunto?: SortOrder
    cuerpo?: SortOrder
    fecha_envio?: SortOrder
    destinatarios?: SortOrder
    remitenteplop?: usuarioOrderByWithRelationInput
  }

  export type correoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: correoWhereInput | correoWhereInput[]
    OR?: correoWhereInput[]
    NOT?: correoWhereInput | correoWhereInput[]
    remitente?: IntFilter<"correo"> | number
    asunto?: StringFilter<"correo"> | string
    cuerpo?: StringFilter<"correo"> | string
    fecha_envio?: DateTimeFilter<"correo"> | Date | string
    destinatarios?: IntFilter<"correo"> | number
    remitenteplop?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "id">

  export type correoOrderByWithAggregationInput = {
    id?: SortOrder
    remitente?: SortOrder
    asunto?: SortOrder
    cuerpo?: SortOrder
    fecha_envio?: SortOrder
    destinatarios?: SortOrder
    _count?: correoCountOrderByAggregateInput
    _avg?: correoAvgOrderByAggregateInput
    _max?: correoMaxOrderByAggregateInput
    _min?: correoMinOrderByAggregateInput
    _sum?: correoSumOrderByAggregateInput
  }

  export type correoScalarWhereWithAggregatesInput = {
    AND?: correoScalarWhereWithAggregatesInput | correoScalarWhereWithAggregatesInput[]
    OR?: correoScalarWhereWithAggregatesInput[]
    NOT?: correoScalarWhereWithAggregatesInput | correoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"correo"> | number
    remitente?: IntWithAggregatesFilter<"correo"> | number
    asunto?: StringWithAggregatesFilter<"correo"> | string
    cuerpo?: StringWithAggregatesFilter<"correo"> | string
    fecha_envio?: DateTimeWithAggregatesFilter<"correo"> | Date | string
    destinatarios?: IntWithAggregatesFilter<"correo"> | number
  }

  export type usuarioCreateInput = {
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
    direccionfavorita?: DireccionesFavoritasCreateNestedManyWithoutUsuarioInput
    direcciones_bloqueada?: direcciones_bloqueadasCreateNestedManyWithoutUsuarioInput
    correos?: correoCreateNestedManyWithoutRemitenteplopInput
  }

  export type usuarioUncheckedCreateInput = {
    id?: number
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
    direccionfavorita?: DireccionesFavoritasUncheckedCreateNestedManyWithoutUsuarioInput
    direcciones_bloqueada?: direcciones_bloqueadasUncheckedCreateNestedManyWithoutUsuarioInput
    correos?: correoUncheckedCreateNestedManyWithoutRemitenteplopInput
  }

  export type usuarioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
    direccionfavorita?: DireccionesFavoritasUpdateManyWithoutUsuarioNestedInput
    direcciones_bloqueada?: direcciones_bloqueadasUpdateManyWithoutUsuarioNestedInput
    correos?: correoUpdateManyWithoutRemitenteplopNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
    direccionfavorita?: DireccionesFavoritasUncheckedUpdateManyWithoutUsuarioNestedInput
    direcciones_bloqueada?: direcciones_bloqueadasUncheckedUpdateManyWithoutUsuarioNestedInput
    correos?: correoUncheckedUpdateManyWithoutRemitenteplopNestedInput
  }

  export type usuarioCreateManyInput = {
    id?: number
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
  }

  export type usuarioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
  }

  export type DireccionesFavoritasCreateInput = {
    fecha_agregado: Date | string
    direccion_favorita: string
    usuario: usuarioCreateNestedOneWithoutDireccionfavoritaInput
  }

  export type DireccionesFavoritasUncheckedCreateInput = {
    id?: number
    usuario_id: number
    fecha_agregado: Date | string
    direccion_favorita: string
  }

  export type DireccionesFavoritasUpdateInput = {
    fecha_agregado?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_favorita?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutDireccionfavoritaNestedInput
  }

  export type DireccionesFavoritasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    fecha_agregado?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_favorita?: StringFieldUpdateOperationsInput | string
  }

  export type DireccionesFavoritasCreateManyInput = {
    id?: number
    usuario_id: number
    fecha_agregado: Date | string
    direccion_favorita: string
  }

  export type DireccionesFavoritasUpdateManyMutationInput = {
    fecha_agregado?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_favorita?: StringFieldUpdateOperationsInput | string
  }

  export type DireccionesFavoritasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    fecha_agregado?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_favorita?: StringFieldUpdateOperationsInput | string
  }

  export type direcciones_bloqueadasCreateInput = {
    fecha_bloqueo: Date | string
    direccion_bloqueada: string
    usuario: usuarioCreateNestedOneWithoutDirecciones_bloqueadaInput
  }

  export type direcciones_bloqueadasUncheckedCreateInput = {
    id?: number
    usuario_id: number
    fecha_bloqueo: Date | string
    direccion_bloqueada: string
  }

  export type direcciones_bloqueadasUpdateInput = {
    fecha_bloqueo?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_bloqueada?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutDirecciones_bloqueadaNestedInput
  }

  export type direcciones_bloqueadasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    fecha_bloqueo?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_bloqueada?: StringFieldUpdateOperationsInput | string
  }

  export type direcciones_bloqueadasCreateManyInput = {
    id?: number
    usuario_id: number
    fecha_bloqueo: Date | string
    direccion_bloqueada: string
  }

  export type direcciones_bloqueadasUpdateManyMutationInput = {
    fecha_bloqueo?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_bloqueada?: StringFieldUpdateOperationsInput | string
  }

  export type direcciones_bloqueadasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    fecha_bloqueo?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_bloqueada?: StringFieldUpdateOperationsInput | string
  }

  export type correoCreateInput = {
    asunto: string
    cuerpo: string
    fecha_envio: Date | string
    destinatarios: number
    remitenteplop: usuarioCreateNestedOneWithoutCorreosInput
  }

  export type correoUncheckedCreateInput = {
    id?: number
    remitente: number
    asunto: string
    cuerpo: string
    fecha_envio: Date | string
    destinatarios: number
  }

  export type correoUpdateInput = {
    asunto?: StringFieldUpdateOperationsInput | string
    cuerpo?: StringFieldUpdateOperationsInput | string
    fecha_envio?: DateTimeFieldUpdateOperationsInput | Date | string
    destinatarios?: IntFieldUpdateOperationsInput | number
    remitenteplop?: usuarioUpdateOneRequiredWithoutCorreosNestedInput
  }

  export type correoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    remitente?: IntFieldUpdateOperationsInput | number
    asunto?: StringFieldUpdateOperationsInput | string
    cuerpo?: StringFieldUpdateOperationsInput | string
    fecha_envio?: DateTimeFieldUpdateOperationsInput | Date | string
    destinatarios?: IntFieldUpdateOperationsInput | number
  }

  export type correoCreateManyInput = {
    id?: number
    remitente: number
    asunto: string
    cuerpo: string
    fecha_envio: Date | string
    destinatarios: number
  }

  export type correoUpdateManyMutationInput = {
    asunto?: StringFieldUpdateOperationsInput | string
    cuerpo?: StringFieldUpdateOperationsInput | string
    fecha_envio?: DateTimeFieldUpdateOperationsInput | Date | string
    destinatarios?: IntFieldUpdateOperationsInput | number
  }

  export type correoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    remitente?: IntFieldUpdateOperationsInput | number
    asunto?: StringFieldUpdateOperationsInput | string
    cuerpo?: StringFieldUpdateOperationsInput | string
    fecha_envio?: DateTimeFieldUpdateOperationsInput | Date | string
    destinatarios?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DireccionesFavoritasListRelationFilter = {
    every?: DireccionesFavoritasWhereInput
    some?: DireccionesFavoritasWhereInput
    none?: DireccionesFavoritasWhereInput
  }

  export type Direcciones_bloqueadasListRelationFilter = {
    every?: direcciones_bloqueadasWhereInput
    some?: direcciones_bloqueadasWhereInput
    none?: direcciones_bloqueadasWhereInput
  }

  export type CorreoListRelationFilter = {
    every?: correoWhereInput
    some?: correoWhereInput
    none?: correoWhereInput
  }

  export type DireccionesFavoritasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type direcciones_bloqueadasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type correoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion_correo?: SortOrder
    descripcion?: SortOrder
    fecha_creacion?: SortOrder
    clave?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion_correo?: SortOrder
    descripcion?: SortOrder
    fecha_creacion?: SortOrder
    clave?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion_correo?: SortOrder
    descripcion?: SortOrder
    fecha_creacion?: SortOrder
    clave?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsuarioRelationFilter = {
    is?: usuarioWhereInput
    isNot?: usuarioWhereInput
  }

  export type DireccionesFavoritasCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_agregado?: SortOrder
    direccion_favorita?: SortOrder
  }

  export type DireccionesFavoritasAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type DireccionesFavoritasMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_agregado?: SortOrder
    direccion_favorita?: SortOrder
  }

  export type DireccionesFavoritasMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_agregado?: SortOrder
    direccion_favorita?: SortOrder
  }

  export type DireccionesFavoritasSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type direcciones_bloqueadasCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_bloqueo?: SortOrder
    direccion_bloqueada?: SortOrder
  }

  export type direcciones_bloqueadasAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type direcciones_bloqueadasMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_bloqueo?: SortOrder
    direccion_bloqueada?: SortOrder
  }

  export type direcciones_bloqueadasMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    fecha_bloqueo?: SortOrder
    direccion_bloqueada?: SortOrder
  }

  export type direcciones_bloqueadasSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type correoCountOrderByAggregateInput = {
    id?: SortOrder
    remitente?: SortOrder
    asunto?: SortOrder
    cuerpo?: SortOrder
    fecha_envio?: SortOrder
    destinatarios?: SortOrder
  }

  export type correoAvgOrderByAggregateInput = {
    id?: SortOrder
    remitente?: SortOrder
    destinatarios?: SortOrder
  }

  export type correoMaxOrderByAggregateInput = {
    id?: SortOrder
    remitente?: SortOrder
    asunto?: SortOrder
    cuerpo?: SortOrder
    fecha_envio?: SortOrder
    destinatarios?: SortOrder
  }

  export type correoMinOrderByAggregateInput = {
    id?: SortOrder
    remitente?: SortOrder
    asunto?: SortOrder
    cuerpo?: SortOrder
    fecha_envio?: SortOrder
    destinatarios?: SortOrder
  }

  export type correoSumOrderByAggregateInput = {
    id?: SortOrder
    remitente?: SortOrder
    destinatarios?: SortOrder
  }

  export type DireccionesFavoritasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<DireccionesFavoritasCreateWithoutUsuarioInput, DireccionesFavoritasUncheckedCreateWithoutUsuarioInput> | DireccionesFavoritasCreateWithoutUsuarioInput[] | DireccionesFavoritasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: DireccionesFavoritasCreateOrConnectWithoutUsuarioInput | DireccionesFavoritasCreateOrConnectWithoutUsuarioInput[]
    createMany?: DireccionesFavoritasCreateManyUsuarioInputEnvelope
    connect?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
  }

  export type direcciones_bloqueadasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<direcciones_bloqueadasCreateWithoutUsuarioInput, direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput> | direcciones_bloqueadasCreateWithoutUsuarioInput[] | direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput | direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput[]
    createMany?: direcciones_bloqueadasCreateManyUsuarioInputEnvelope
    connect?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
  }

  export type correoCreateNestedManyWithoutRemitenteplopInput = {
    create?: XOR<correoCreateWithoutRemitenteplopInput, correoUncheckedCreateWithoutRemitenteplopInput> | correoCreateWithoutRemitenteplopInput[] | correoUncheckedCreateWithoutRemitenteplopInput[]
    connectOrCreate?: correoCreateOrConnectWithoutRemitenteplopInput | correoCreateOrConnectWithoutRemitenteplopInput[]
    createMany?: correoCreateManyRemitenteplopInputEnvelope
    connect?: correoWhereUniqueInput | correoWhereUniqueInput[]
  }

  export type DireccionesFavoritasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<DireccionesFavoritasCreateWithoutUsuarioInput, DireccionesFavoritasUncheckedCreateWithoutUsuarioInput> | DireccionesFavoritasCreateWithoutUsuarioInput[] | DireccionesFavoritasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: DireccionesFavoritasCreateOrConnectWithoutUsuarioInput | DireccionesFavoritasCreateOrConnectWithoutUsuarioInput[]
    createMany?: DireccionesFavoritasCreateManyUsuarioInputEnvelope
    connect?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
  }

  export type direcciones_bloqueadasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<direcciones_bloqueadasCreateWithoutUsuarioInput, direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput> | direcciones_bloqueadasCreateWithoutUsuarioInput[] | direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput | direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput[]
    createMany?: direcciones_bloqueadasCreateManyUsuarioInputEnvelope
    connect?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
  }

  export type correoUncheckedCreateNestedManyWithoutRemitenteplopInput = {
    create?: XOR<correoCreateWithoutRemitenteplopInput, correoUncheckedCreateWithoutRemitenteplopInput> | correoCreateWithoutRemitenteplopInput[] | correoUncheckedCreateWithoutRemitenteplopInput[]
    connectOrCreate?: correoCreateOrConnectWithoutRemitenteplopInput | correoCreateOrConnectWithoutRemitenteplopInput[]
    createMany?: correoCreateManyRemitenteplopInputEnvelope
    connect?: correoWhereUniqueInput | correoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DireccionesFavoritasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<DireccionesFavoritasCreateWithoutUsuarioInput, DireccionesFavoritasUncheckedCreateWithoutUsuarioInput> | DireccionesFavoritasCreateWithoutUsuarioInput[] | DireccionesFavoritasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: DireccionesFavoritasCreateOrConnectWithoutUsuarioInput | DireccionesFavoritasCreateOrConnectWithoutUsuarioInput[]
    upsert?: DireccionesFavoritasUpsertWithWhereUniqueWithoutUsuarioInput | DireccionesFavoritasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: DireccionesFavoritasCreateManyUsuarioInputEnvelope
    set?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
    disconnect?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
    delete?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
    connect?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
    update?: DireccionesFavoritasUpdateWithWhereUniqueWithoutUsuarioInput | DireccionesFavoritasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: DireccionesFavoritasUpdateManyWithWhereWithoutUsuarioInput | DireccionesFavoritasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: DireccionesFavoritasScalarWhereInput | DireccionesFavoritasScalarWhereInput[]
  }

  export type direcciones_bloqueadasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<direcciones_bloqueadasCreateWithoutUsuarioInput, direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput> | direcciones_bloqueadasCreateWithoutUsuarioInput[] | direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput | direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput[]
    upsert?: direcciones_bloqueadasUpsertWithWhereUniqueWithoutUsuarioInput | direcciones_bloqueadasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: direcciones_bloqueadasCreateManyUsuarioInputEnvelope
    set?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
    disconnect?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
    delete?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
    connect?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
    update?: direcciones_bloqueadasUpdateWithWhereUniqueWithoutUsuarioInput | direcciones_bloqueadasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: direcciones_bloqueadasUpdateManyWithWhereWithoutUsuarioInput | direcciones_bloqueadasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: direcciones_bloqueadasScalarWhereInput | direcciones_bloqueadasScalarWhereInput[]
  }

  export type correoUpdateManyWithoutRemitenteplopNestedInput = {
    create?: XOR<correoCreateWithoutRemitenteplopInput, correoUncheckedCreateWithoutRemitenteplopInput> | correoCreateWithoutRemitenteplopInput[] | correoUncheckedCreateWithoutRemitenteplopInput[]
    connectOrCreate?: correoCreateOrConnectWithoutRemitenteplopInput | correoCreateOrConnectWithoutRemitenteplopInput[]
    upsert?: correoUpsertWithWhereUniqueWithoutRemitenteplopInput | correoUpsertWithWhereUniqueWithoutRemitenteplopInput[]
    createMany?: correoCreateManyRemitenteplopInputEnvelope
    set?: correoWhereUniqueInput | correoWhereUniqueInput[]
    disconnect?: correoWhereUniqueInput | correoWhereUniqueInput[]
    delete?: correoWhereUniqueInput | correoWhereUniqueInput[]
    connect?: correoWhereUniqueInput | correoWhereUniqueInput[]
    update?: correoUpdateWithWhereUniqueWithoutRemitenteplopInput | correoUpdateWithWhereUniqueWithoutRemitenteplopInput[]
    updateMany?: correoUpdateManyWithWhereWithoutRemitenteplopInput | correoUpdateManyWithWhereWithoutRemitenteplopInput[]
    deleteMany?: correoScalarWhereInput | correoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DireccionesFavoritasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<DireccionesFavoritasCreateWithoutUsuarioInput, DireccionesFavoritasUncheckedCreateWithoutUsuarioInput> | DireccionesFavoritasCreateWithoutUsuarioInput[] | DireccionesFavoritasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: DireccionesFavoritasCreateOrConnectWithoutUsuarioInput | DireccionesFavoritasCreateOrConnectWithoutUsuarioInput[]
    upsert?: DireccionesFavoritasUpsertWithWhereUniqueWithoutUsuarioInput | DireccionesFavoritasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: DireccionesFavoritasCreateManyUsuarioInputEnvelope
    set?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
    disconnect?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
    delete?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
    connect?: DireccionesFavoritasWhereUniqueInput | DireccionesFavoritasWhereUniqueInput[]
    update?: DireccionesFavoritasUpdateWithWhereUniqueWithoutUsuarioInput | DireccionesFavoritasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: DireccionesFavoritasUpdateManyWithWhereWithoutUsuarioInput | DireccionesFavoritasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: DireccionesFavoritasScalarWhereInput | DireccionesFavoritasScalarWhereInput[]
  }

  export type direcciones_bloqueadasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<direcciones_bloqueadasCreateWithoutUsuarioInput, direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput> | direcciones_bloqueadasCreateWithoutUsuarioInput[] | direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput | direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput[]
    upsert?: direcciones_bloqueadasUpsertWithWhereUniqueWithoutUsuarioInput | direcciones_bloqueadasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: direcciones_bloqueadasCreateManyUsuarioInputEnvelope
    set?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
    disconnect?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
    delete?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
    connect?: direcciones_bloqueadasWhereUniqueInput | direcciones_bloqueadasWhereUniqueInput[]
    update?: direcciones_bloqueadasUpdateWithWhereUniqueWithoutUsuarioInput | direcciones_bloqueadasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: direcciones_bloqueadasUpdateManyWithWhereWithoutUsuarioInput | direcciones_bloqueadasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: direcciones_bloqueadasScalarWhereInput | direcciones_bloqueadasScalarWhereInput[]
  }

  export type correoUncheckedUpdateManyWithoutRemitenteplopNestedInput = {
    create?: XOR<correoCreateWithoutRemitenteplopInput, correoUncheckedCreateWithoutRemitenteplopInput> | correoCreateWithoutRemitenteplopInput[] | correoUncheckedCreateWithoutRemitenteplopInput[]
    connectOrCreate?: correoCreateOrConnectWithoutRemitenteplopInput | correoCreateOrConnectWithoutRemitenteplopInput[]
    upsert?: correoUpsertWithWhereUniqueWithoutRemitenteplopInput | correoUpsertWithWhereUniqueWithoutRemitenteplopInput[]
    createMany?: correoCreateManyRemitenteplopInputEnvelope
    set?: correoWhereUniqueInput | correoWhereUniqueInput[]
    disconnect?: correoWhereUniqueInput | correoWhereUniqueInput[]
    delete?: correoWhereUniqueInput | correoWhereUniqueInput[]
    connect?: correoWhereUniqueInput | correoWhereUniqueInput[]
    update?: correoUpdateWithWhereUniqueWithoutRemitenteplopInput | correoUpdateWithWhereUniqueWithoutRemitenteplopInput[]
    updateMany?: correoUpdateManyWithWhereWithoutRemitenteplopInput | correoUpdateManyWithWhereWithoutRemitenteplopInput[]
    deleteMany?: correoScalarWhereInput | correoScalarWhereInput[]
  }

  export type usuarioCreateNestedOneWithoutDireccionfavoritaInput = {
    create?: XOR<usuarioCreateWithoutDireccionfavoritaInput, usuarioUncheckedCreateWithoutDireccionfavoritaInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutDireccionfavoritaInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutDireccionfavoritaNestedInput = {
    create?: XOR<usuarioCreateWithoutDireccionfavoritaInput, usuarioUncheckedCreateWithoutDireccionfavoritaInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutDireccionfavoritaInput
    upsert?: usuarioUpsertWithoutDireccionfavoritaInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutDireccionfavoritaInput, usuarioUpdateWithoutDireccionfavoritaInput>, usuarioUncheckedUpdateWithoutDireccionfavoritaInput>
  }

  export type usuarioCreateNestedOneWithoutDirecciones_bloqueadaInput = {
    create?: XOR<usuarioCreateWithoutDirecciones_bloqueadaInput, usuarioUncheckedCreateWithoutDirecciones_bloqueadaInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutDirecciones_bloqueadaInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutDirecciones_bloqueadaNestedInput = {
    create?: XOR<usuarioCreateWithoutDirecciones_bloqueadaInput, usuarioUncheckedCreateWithoutDirecciones_bloqueadaInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutDirecciones_bloqueadaInput
    upsert?: usuarioUpsertWithoutDirecciones_bloqueadaInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutDirecciones_bloqueadaInput, usuarioUpdateWithoutDirecciones_bloqueadaInput>, usuarioUncheckedUpdateWithoutDirecciones_bloqueadaInput>
  }

  export type usuarioCreateNestedOneWithoutCorreosInput = {
    create?: XOR<usuarioCreateWithoutCorreosInput, usuarioUncheckedCreateWithoutCorreosInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutCorreosInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutCorreosNestedInput = {
    create?: XOR<usuarioCreateWithoutCorreosInput, usuarioUncheckedCreateWithoutCorreosInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutCorreosInput
    upsert?: usuarioUpsertWithoutCorreosInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutCorreosInput, usuarioUpdateWithoutCorreosInput>, usuarioUncheckedUpdateWithoutCorreosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DireccionesFavoritasCreateWithoutUsuarioInput = {
    fecha_agregado: Date | string
    direccion_favorita: string
  }

  export type DireccionesFavoritasUncheckedCreateWithoutUsuarioInput = {
    id?: number
    fecha_agregado: Date | string
    direccion_favorita: string
  }

  export type DireccionesFavoritasCreateOrConnectWithoutUsuarioInput = {
    where: DireccionesFavoritasWhereUniqueInput
    create: XOR<DireccionesFavoritasCreateWithoutUsuarioInput, DireccionesFavoritasUncheckedCreateWithoutUsuarioInput>
  }

  export type DireccionesFavoritasCreateManyUsuarioInputEnvelope = {
    data: DireccionesFavoritasCreateManyUsuarioInput | DireccionesFavoritasCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type direcciones_bloqueadasCreateWithoutUsuarioInput = {
    fecha_bloqueo: Date | string
    direccion_bloqueada: string
  }

  export type direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput = {
    id?: number
    fecha_bloqueo: Date | string
    direccion_bloqueada: string
  }

  export type direcciones_bloqueadasCreateOrConnectWithoutUsuarioInput = {
    where: direcciones_bloqueadasWhereUniqueInput
    create: XOR<direcciones_bloqueadasCreateWithoutUsuarioInput, direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput>
  }

  export type direcciones_bloqueadasCreateManyUsuarioInputEnvelope = {
    data: direcciones_bloqueadasCreateManyUsuarioInput | direcciones_bloqueadasCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type correoCreateWithoutRemitenteplopInput = {
    asunto: string
    cuerpo: string
    fecha_envio: Date | string
    destinatarios: number
  }

  export type correoUncheckedCreateWithoutRemitenteplopInput = {
    id?: number
    asunto: string
    cuerpo: string
    fecha_envio: Date | string
    destinatarios: number
  }

  export type correoCreateOrConnectWithoutRemitenteplopInput = {
    where: correoWhereUniqueInput
    create: XOR<correoCreateWithoutRemitenteplopInput, correoUncheckedCreateWithoutRemitenteplopInput>
  }

  export type correoCreateManyRemitenteplopInputEnvelope = {
    data: correoCreateManyRemitenteplopInput | correoCreateManyRemitenteplopInput[]
    skipDuplicates?: boolean
  }

  export type DireccionesFavoritasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: DireccionesFavoritasWhereUniqueInput
    update: XOR<DireccionesFavoritasUpdateWithoutUsuarioInput, DireccionesFavoritasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<DireccionesFavoritasCreateWithoutUsuarioInput, DireccionesFavoritasUncheckedCreateWithoutUsuarioInput>
  }

  export type DireccionesFavoritasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: DireccionesFavoritasWhereUniqueInput
    data: XOR<DireccionesFavoritasUpdateWithoutUsuarioInput, DireccionesFavoritasUncheckedUpdateWithoutUsuarioInput>
  }

  export type DireccionesFavoritasUpdateManyWithWhereWithoutUsuarioInput = {
    where: DireccionesFavoritasScalarWhereInput
    data: XOR<DireccionesFavoritasUpdateManyMutationInput, DireccionesFavoritasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type DireccionesFavoritasScalarWhereInput = {
    AND?: DireccionesFavoritasScalarWhereInput | DireccionesFavoritasScalarWhereInput[]
    OR?: DireccionesFavoritasScalarWhereInput[]
    NOT?: DireccionesFavoritasScalarWhereInput | DireccionesFavoritasScalarWhereInput[]
    id?: IntFilter<"DireccionesFavoritas"> | number
    usuario_id?: IntFilter<"DireccionesFavoritas"> | number
    fecha_agregado?: DateTimeFilter<"DireccionesFavoritas"> | Date | string
    direccion_favorita?: StringFilter<"DireccionesFavoritas"> | string
  }

  export type direcciones_bloqueadasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: direcciones_bloqueadasWhereUniqueInput
    update: XOR<direcciones_bloqueadasUpdateWithoutUsuarioInput, direcciones_bloqueadasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<direcciones_bloqueadasCreateWithoutUsuarioInput, direcciones_bloqueadasUncheckedCreateWithoutUsuarioInput>
  }

  export type direcciones_bloqueadasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: direcciones_bloqueadasWhereUniqueInput
    data: XOR<direcciones_bloqueadasUpdateWithoutUsuarioInput, direcciones_bloqueadasUncheckedUpdateWithoutUsuarioInput>
  }

  export type direcciones_bloqueadasUpdateManyWithWhereWithoutUsuarioInput = {
    where: direcciones_bloqueadasScalarWhereInput
    data: XOR<direcciones_bloqueadasUpdateManyMutationInput, direcciones_bloqueadasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type direcciones_bloqueadasScalarWhereInput = {
    AND?: direcciones_bloqueadasScalarWhereInput | direcciones_bloqueadasScalarWhereInput[]
    OR?: direcciones_bloqueadasScalarWhereInput[]
    NOT?: direcciones_bloqueadasScalarWhereInput | direcciones_bloqueadasScalarWhereInput[]
    id?: IntFilter<"direcciones_bloqueadas"> | number
    usuario_id?: IntFilter<"direcciones_bloqueadas"> | number
    fecha_bloqueo?: DateTimeFilter<"direcciones_bloqueadas"> | Date | string
    direccion_bloqueada?: StringFilter<"direcciones_bloqueadas"> | string
  }

  export type correoUpsertWithWhereUniqueWithoutRemitenteplopInput = {
    where: correoWhereUniqueInput
    update: XOR<correoUpdateWithoutRemitenteplopInput, correoUncheckedUpdateWithoutRemitenteplopInput>
    create: XOR<correoCreateWithoutRemitenteplopInput, correoUncheckedCreateWithoutRemitenteplopInput>
  }

  export type correoUpdateWithWhereUniqueWithoutRemitenteplopInput = {
    where: correoWhereUniqueInput
    data: XOR<correoUpdateWithoutRemitenteplopInput, correoUncheckedUpdateWithoutRemitenteplopInput>
  }

  export type correoUpdateManyWithWhereWithoutRemitenteplopInput = {
    where: correoScalarWhereInput
    data: XOR<correoUpdateManyMutationInput, correoUncheckedUpdateManyWithoutRemitenteplopInput>
  }

  export type correoScalarWhereInput = {
    AND?: correoScalarWhereInput | correoScalarWhereInput[]
    OR?: correoScalarWhereInput[]
    NOT?: correoScalarWhereInput | correoScalarWhereInput[]
    id?: IntFilter<"correo"> | number
    remitente?: IntFilter<"correo"> | number
    asunto?: StringFilter<"correo"> | string
    cuerpo?: StringFilter<"correo"> | string
    fecha_envio?: DateTimeFilter<"correo"> | Date | string
    destinatarios?: IntFilter<"correo"> | number
  }

  export type usuarioCreateWithoutDireccionfavoritaInput = {
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
    direcciones_bloqueada?: direcciones_bloqueadasCreateNestedManyWithoutUsuarioInput
    correos?: correoCreateNestedManyWithoutRemitenteplopInput
  }

  export type usuarioUncheckedCreateWithoutDireccionfavoritaInput = {
    id?: number
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
    direcciones_bloqueada?: direcciones_bloqueadasUncheckedCreateNestedManyWithoutUsuarioInput
    correos?: correoUncheckedCreateNestedManyWithoutRemitenteplopInput
  }

  export type usuarioCreateOrConnectWithoutDireccionfavoritaInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutDireccionfavoritaInput, usuarioUncheckedCreateWithoutDireccionfavoritaInput>
  }

  export type usuarioUpsertWithoutDireccionfavoritaInput = {
    update: XOR<usuarioUpdateWithoutDireccionfavoritaInput, usuarioUncheckedUpdateWithoutDireccionfavoritaInput>
    create: XOR<usuarioCreateWithoutDireccionfavoritaInput, usuarioUncheckedCreateWithoutDireccionfavoritaInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutDireccionfavoritaInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutDireccionfavoritaInput, usuarioUncheckedUpdateWithoutDireccionfavoritaInput>
  }

  export type usuarioUpdateWithoutDireccionfavoritaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
    direcciones_bloqueada?: direcciones_bloqueadasUpdateManyWithoutUsuarioNestedInput
    correos?: correoUpdateManyWithoutRemitenteplopNestedInput
  }

  export type usuarioUncheckedUpdateWithoutDireccionfavoritaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
    direcciones_bloqueada?: direcciones_bloqueadasUncheckedUpdateManyWithoutUsuarioNestedInput
    correos?: correoUncheckedUpdateManyWithoutRemitenteplopNestedInput
  }

  export type usuarioCreateWithoutDirecciones_bloqueadaInput = {
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
    direccionfavorita?: DireccionesFavoritasCreateNestedManyWithoutUsuarioInput
    correos?: correoCreateNestedManyWithoutRemitenteplopInput
  }

  export type usuarioUncheckedCreateWithoutDirecciones_bloqueadaInput = {
    id?: number
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
    direccionfavorita?: DireccionesFavoritasUncheckedCreateNestedManyWithoutUsuarioInput
    correos?: correoUncheckedCreateNestedManyWithoutRemitenteplopInput
  }

  export type usuarioCreateOrConnectWithoutDirecciones_bloqueadaInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutDirecciones_bloqueadaInput, usuarioUncheckedCreateWithoutDirecciones_bloqueadaInput>
  }

  export type usuarioUpsertWithoutDirecciones_bloqueadaInput = {
    update: XOR<usuarioUpdateWithoutDirecciones_bloqueadaInput, usuarioUncheckedUpdateWithoutDirecciones_bloqueadaInput>
    create: XOR<usuarioCreateWithoutDirecciones_bloqueadaInput, usuarioUncheckedCreateWithoutDirecciones_bloqueadaInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutDirecciones_bloqueadaInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutDirecciones_bloqueadaInput, usuarioUncheckedUpdateWithoutDirecciones_bloqueadaInput>
  }

  export type usuarioUpdateWithoutDirecciones_bloqueadaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
    direccionfavorita?: DireccionesFavoritasUpdateManyWithoutUsuarioNestedInput
    correos?: correoUpdateManyWithoutRemitenteplopNestedInput
  }

  export type usuarioUncheckedUpdateWithoutDirecciones_bloqueadaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
    direccionfavorita?: DireccionesFavoritasUncheckedUpdateManyWithoutUsuarioNestedInput
    correos?: correoUncheckedUpdateManyWithoutRemitenteplopNestedInput
  }

  export type usuarioCreateWithoutCorreosInput = {
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
    direccionfavorita?: DireccionesFavoritasCreateNestedManyWithoutUsuarioInput
    direcciones_bloqueada?: direcciones_bloqueadasCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutCorreosInput = {
    id?: number
    nombre: string
    direccion_correo: string
    descripcion: string
    fecha_creacion: Date | string
    clave: string
    direccionfavorita?: DireccionesFavoritasUncheckedCreateNestedManyWithoutUsuarioInput
    direcciones_bloqueada?: direcciones_bloqueadasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutCorreosInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutCorreosInput, usuarioUncheckedCreateWithoutCorreosInput>
  }

  export type usuarioUpsertWithoutCorreosInput = {
    update: XOR<usuarioUpdateWithoutCorreosInput, usuarioUncheckedUpdateWithoutCorreosInput>
    create: XOR<usuarioCreateWithoutCorreosInput, usuarioUncheckedCreateWithoutCorreosInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutCorreosInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutCorreosInput, usuarioUncheckedUpdateWithoutCorreosInput>
  }

  export type usuarioUpdateWithoutCorreosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
    direccionfavorita?: DireccionesFavoritasUpdateManyWithoutUsuarioNestedInput
    direcciones_bloqueada?: direcciones_bloqueadasUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutCorreosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion_correo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha_creacion?: DateTimeFieldUpdateOperationsInput | Date | string
    clave?: StringFieldUpdateOperationsInput | string
    direccionfavorita?: DireccionesFavoritasUncheckedUpdateManyWithoutUsuarioNestedInput
    direcciones_bloqueada?: direcciones_bloqueadasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type DireccionesFavoritasCreateManyUsuarioInput = {
    id?: number
    fecha_agregado: Date | string
    direccion_favorita: string
  }

  export type direcciones_bloqueadasCreateManyUsuarioInput = {
    id?: number
    fecha_bloqueo: Date | string
    direccion_bloqueada: string
  }

  export type correoCreateManyRemitenteplopInput = {
    id?: number
    asunto: string
    cuerpo: string
    fecha_envio: Date | string
    destinatarios: number
  }

  export type DireccionesFavoritasUpdateWithoutUsuarioInput = {
    fecha_agregado?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_favorita?: StringFieldUpdateOperationsInput | string
  }

  export type DireccionesFavoritasUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_agregado?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_favorita?: StringFieldUpdateOperationsInput | string
  }

  export type DireccionesFavoritasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_agregado?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_favorita?: StringFieldUpdateOperationsInput | string
  }

  export type direcciones_bloqueadasUpdateWithoutUsuarioInput = {
    fecha_bloqueo?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_bloqueada?: StringFieldUpdateOperationsInput | string
  }

  export type direcciones_bloqueadasUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_bloqueo?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_bloqueada?: StringFieldUpdateOperationsInput | string
  }

  export type direcciones_bloqueadasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_bloqueo?: DateTimeFieldUpdateOperationsInput | Date | string
    direccion_bloqueada?: StringFieldUpdateOperationsInput | string
  }

  export type correoUpdateWithoutRemitenteplopInput = {
    asunto?: StringFieldUpdateOperationsInput | string
    cuerpo?: StringFieldUpdateOperationsInput | string
    fecha_envio?: DateTimeFieldUpdateOperationsInput | Date | string
    destinatarios?: IntFieldUpdateOperationsInput | number
  }

  export type correoUncheckedUpdateWithoutRemitenteplopInput = {
    id?: IntFieldUpdateOperationsInput | number
    asunto?: StringFieldUpdateOperationsInput | string
    cuerpo?: StringFieldUpdateOperationsInput | string
    fecha_envio?: DateTimeFieldUpdateOperationsInput | Date | string
    destinatarios?: IntFieldUpdateOperationsInput | number
  }

  export type correoUncheckedUpdateManyWithoutRemitenteplopInput = {
    id?: IntFieldUpdateOperationsInput | number
    asunto?: StringFieldUpdateOperationsInput | string
    cuerpo?: StringFieldUpdateOperationsInput | string
    fecha_envio?: DateTimeFieldUpdateOperationsInput | Date | string
    destinatarios?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DireccionesFavoritasDefaultArgs instead
     */
    export type DireccionesFavoritasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DireccionesFavoritasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use direcciones_bloqueadasDefaultArgs instead
     */
    export type direcciones_bloqueadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = direcciones_bloqueadasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use correoDefaultArgs instead
     */
    export type correoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = correoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}